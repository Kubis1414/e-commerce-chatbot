name: CI/CD Pipeline

on:
  push:
    branches:
      - dev
      - main

jobs:
  # test:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout kódu
  #       uses: actions/checkout@v2

  #     - name: Nastavení Pythonu
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: '3.10.12'

  #     - name: Instalace závislostí
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install -r requirements.txt

  #     - name: Nastavení Google credentials
  #       run: echo ${{ secrets.GOOGLE_CREDENTIALS_JSON }} > google-credentials.json

  #     - name: Spuštění testů
  #       run: |
  #         export PYTHONPATH=$PYTHONPATH:$(pwd)
  #         pytest tests
  #       env:
  #         OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  #         GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
  #         ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  #         GOOGLE_APPLICATION_CREDENTIALS: google-credentials.json

  deploy:
    if: github.ref == 'refs/heads/dev'
    # needs: test
    runs-on: ubuntu-latest
    env:
      RELEASE_DIR_BASE: ~/chat_releases
      CURRENT_RELEASE_LINK: ~/chat_releases/current
    steps:
      - name: Checkout kódu
        uses: actions/checkout@v2
      - name: Přidání host key serveru do known_hosts
        run: |
          mkdir -p ~/.ssh
          echo ${{ secrets.SERVER_KNOWN_HOSTS }} > ~/.ssh/known_hosts
      - name: Přidání SSH klíče
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
      - name: Get current date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%dT%H-%M-%S')"
      - name: Připojení k serveru a nasazení Blue/Green
        run: |
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
          set -e
          
          echo "Vytvářím nový release directory: $DEPLOY_DIR"
          mkdir -p $DEPLOY_DIR

          echo "Klonuji repository do $DEPLOY_DIR"
          git clone git@github.com:Kubis1414/e-commerce-chatbot.git $DEPLOY_DIR
          cd $DEPLOY_DIR

          echo "Zapisuji .env soubor"
          echo "${{ secrets.ENV_VARS }}" > .env

          echo "Vytvářím virtuální prostředí, pokud neexistuje"
          if [ ! -d "venv" ]; then
            python3 -m venv venv
          fi

          echo "Aktivuji virtuální prostředí a instaluji dependencies"
          source venv/bin/activate
         

          echo "Deaktivuji virtuální prostředí"
          deactivate
          EOF
        env:
          CURRENT_RELEASE_LINK: ${{ env.RELEASE_DIR_BASE }}/current
          PREVIOUS_RELEASE_DIR: ${{ env.RELEASE_DIR_BASE }}/release-previous
          NEW_RELEASE_DIR: ${{ env.RELEASE_DIR_BASE }}/release-new
          DEPLOY_DIR: ${{ env.RELEASE_DIR_BASE }}/release-${{ steps.date.outputs.date }}
      # - name: Pre-deploy testy na serveru
      #   run: |
      #     ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF

      #     echo "Přepínám do deployment directory: $DEPLOY_DIR"
      #     cd $DEPLOY_DIR

      #     echo "Zapisuji .env soubor"
      #     echo "${{ secrets.ENV_VARS }}" > .env

      #     echo "Aktivuji virtuální prostředí pro testy"
      #     source venv/bin/activate

      #     echo "Spouštím testy v pre-produkčním prostředí"
      #     export PYTHONPATH=$PYTHONPATH:$(pwd)
      #     pytest tests
      #   env:
      #     OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      #     GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      #     ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      #     GOOGLE_APPLICATION_CREDENTIALS: google-credentials.json
      #     DEPLOY_DIR: ${{ env.RELEASE_DIR_BASE }}/release-${{ steps.date.outputs.date }}
      - name: Přepojení symlinku a restart produkce
        if: success()
        run: |
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
          set -e

          echo "Přepínám symbolický link current na nový release..."
          if [ -L ~/chat_releases/current ]; then
            echo "Aktuální 'current' symlink existuje. Odstraňuji ho..."
            rm ~/chat_releases/current
          else
            echo "Aktuální 'current' symlink NEEXISTUJE."
          fi

          echo "Vytvářím nový symlink '~/chat_releases/current' -> '$DEPLOY_DIR'"
          ln -s $DEPLOY_DIR ~/chat_releases/current

          echo "Restartuji systemd service ecommerce_chatbot.service"
          sudo systemctl restart ecommerce_chatbot.service
          echo "Kontroluji status systemd service ecommerce_chatbot.service"
          sudo systemctl status ecommerce_chatbot.service

          echo "Dokončeno přepnutí 'current' symlink na nový release v '$DEPLOY_DIR', 'current' nyní ukazuje na '~/chat_releases/current'"

          EOF
        env:
          DEPLOY_DIR: ${{ env.RELEASE_DIR_BASE }}/release-${{ steps.date.outputs.date }}
        
      - name: Úklid starých releases # NOVÝ KROK - ÚKLID STARÝCH RELEASES (BEZ $())
        run: |
          ssh -o StrictHostKeyChecking=yes -i ~/.ssh/id_rsa ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} <<EOF
          set -e

          echo "Spouštím úklid starých releases, ponechávám 3 nejnovější (bez $()...)"

          # 1. Seznam release adresářů a seřazení do souboru
          echo "Vylistovávám release adresáře a řadím je (do souboru)..."
          ls -d ${{env.RELEASE_DIR_BASE}}/release-* | sort -r > /tmp/release_dirs.txt # Výstup do souboru /tmp/release_dirs.txt
          echo "Seznam release adresářů seřazen, výstup v /tmp/release_dirs.txt"

          # 2. Výběr adresářů ke smazání (kromě 3 nejnovějších) do souboru
          echo "Vybírám adresáře ke smazání (kromě 3 nejnovějších) do souboru..."
          tail -n +4 /tmp/release_dirs.txt > /tmp/to_delete.txt # Výstup do souboru /tmp/to_delete.txt
          echo "Seznam adresářů ke smazání vybrán, výstup v /tmp/to_delete.txt"

          # 3. Mazání adresářů ze seznamu v souboru /tmp/to_delete.txt
          echo "Mažu staré releases podle seznamu v /tmp/to_delete.txt..."
          if [ -s /tmp/to_delete.txt ]; then # Pokud soubor /tmp/to_delete.txt NENÍ prázdný (-s test)
              while IFS= read -r dir; do # Procházíme řádky ze souboru /tmp/to_delete.txt
                  echo "Mažu starý release: $dir"
                  rm -rf "$dir" # SMAŽEME STARÝ RELEASE! POZOR NA TENTO PŘÍKAZ! DŮKLADNĚ OTESTOVAT!
                  echo "Release $dir smazán."
              done < /tmp/to_delete.txt # Čteme vstup z /tmp/to_delete.txt  (Místo <<< "$TO_DELETE")
          else
              echo "Žádné staré releases k smazání (ponechávám 3 nejnovější)."
          fi
          echo "Mazání starých releases dokončeno (bez $())."

          # 4. Smazání dočasných souborů
          echo "Uklízím dočasné soubory..."
          rm /tmp/release_dirs.txt /tmp/to_delete.txt
          echo "Dočasné soubory smazány."


          EOF
        env:
          RELEASE_DIR_BASE: ${{ env.RELEASE_DIR_BASE }} # Důležité, aby úklid věděl, kde hledat releases